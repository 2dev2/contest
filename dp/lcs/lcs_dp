/*
// Dynamic Programming Code (Bottom-up):
//http://shiv4289.wordpress.com/2012/02/07/lcs-and-lis/
//http://www.ics.uci.edu/~eppstein/161/960229.html

The DP code above moves bottom-up. It solves all the subproblems. 
Sometimes it may not be required to solve all the subproblems but only a few of them. 
This is what the memoization techenique does.
*/
#include <stdio.h>
#include <string.h>
#define MAX 100
char X[MAX],Y[MAX];
int i,j,m,n,c[MAX][MAX],b[MAX][MAX];
 
int LCSlength()
 
{
           m=strlen(X);
           n=strlen(Y);
           for (i=1;i<=m;i++) c[i][0]=0;
           for (j=0;j<=n;j++) c[0][j]=0;
           for (i=1;i<=m;i++)
           for (j=1;j<=n;j++) {
                         if (X[i-1]==Y[j-1]) {
                                  c[i][j]=c[i-1][j-1]+1;
                                  b[i][j]=1;
                         }
                        else if (c[i-1][j]>=c[i][j-1]) {
                                  c[i][j]=c[i-1][j];
                                  b[i][j]=2;
                       }
                       else {
                                  c[i][j]=c[i][j-1];
                                  b[i][j]=3;
                       }
          }
          return c[m][n];
}
 
void printLCS(int i,int j)
 
{
                  if (i==0 || j==0) return;
                  if (b[i][j]==1) {
                         printLCS(i-1,j-1);
                         printf("%c",X[i-1]);
 
                 }
                 else if (b[i][j]==2)
                         printLCS(i-1,j);
                 else
                         printLCS(i,j-1);
}
 
int main()
 
 {
                while (1) {
                            gets(X);
                            if (feof(stdin)) break;
                            gets(Y);
                            printf("LCS length -> %d\n",LCSlength());
                            printLCS(m,n);
                            printf("\n");
               }
}
